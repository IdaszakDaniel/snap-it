{"version":3,"sources":["../src/index.ts"],"names":["yargs","command","snapshot","argv","fileName","path","join","process","cwd","name","console","log","testNameRegex","testName","match","program","ts","createProgram","checker","getTypeChecker","source","getSourceFile","Error","forEachChild","node","isInterfaceDeclaration","symbol","getSymbolAtLocation","data","members","forEach","loc","info","push"],"mappings":";;AAAA;;AACA;;AACA;;AAEA;;AACA;;;;;;;;AAEAA,eACGC,OADH,CACW,UADX,EACuB,iCADvB,EAC0D,EAD1D,EAC8DC,QAD9D,EAEGC,IAFH;;AAIA,eAAeD,QAAf,CAAwBC,IAAxB,EAAoD;AAClD,QAAMC,QAAQ,GAAGC,cAAKC,IAAL,CAAUC,OAAO,CAACC,GAAR,EAAV,EAAyBL,IAAI,CAACM,IAA9B,CAAjB;;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAa,YAAWP,QAAS,EAAjC;AAEA,QAAMQ,aAAa,GAAG,eAAtB;AACA,QAAMC,QAAQ,GAAGT,QAAQ,CAACU,KAAT,CAAeF,aAAf,EAA8B,CAA9B,CAAjB;AAEA,QAAMG,OAAO,GAAGC,EAAE,CAACC,aAAH,CAAiB,CAACb,QAAD,CAAjB,EAA6B,EAA7B,CAAhB;AACA,QAAMc,OAAO,GAAGH,OAAO,CAACI,cAAR,EAAhB;AACA,QAAMC,MAAM,GAAGL,OAAO,CAACM,aAAR,CAAsBjB,QAAtB,CAAf;;AAEA,MAAI,CAACgB,MAAL,EAAa;AACX;AACA,UAAM,IAAIE,KAAJ,CAAU,oCAAV,CAAN;AACD;;AAEDN,EAAAA,EAAE,CAACO,YAAH,CAAgBH,MAAhB,EAAyBI,IAAD,IAAU;AAChC,QAAIR,EAAE,CAACS,sBAAH,CAA0BD,IAA1B,CAAJ,EAAoC;AAClC;AACA,YAAME,MAAM,GAAGR,OAAO,CAACS,mBAAR,CAA4BH,IAAI,CAACf,IAAjC,CAAf;AACA,YAAMmB,IAAI,GAAG,EAAb;AACAF,MAAAA,MAAM,CAACG,OAAP,CAAeC,OAAf,CAAwBC,GAAD,IAAS;AAC9B,cAAMC,IAAI,GAAG,sCAAgBD,GAAhB,EAAqBb,OAArB,CAAb;AACAU,QAAAA,IAAI,CAACK,IAAL,CAAUD,IAAV;AACD,OAHD;AAIA,8CAAiBJ,IAAjB,EAAuBf,QAAvB;AACD;AACF,GAXD;AAYD","sourcesContent":["import path from 'path';\nimport * as ts from 'typescript'\nimport yargs from 'yargs';\n\nimport { serializeSymbol, TestPropsInfo } from './serializeSymbol';\nimport { generateTestFile } from './generateTestFile';\n\nyargs\n  .command('g <name>', 'create a snapshot for component', {}, snapshot)\n  .argv;\n\nasync function snapshot(argv: yargs.Arguments<any>) {\n  const fileName = path.join(process.cwd(), argv.name)\n  console.log(`Reading: ${fileName}`)\n\n  const testNameRegex = /[^\\/]+(?=\\.)/g\n  const testName = fileName.match(testNameRegex)[0]\n\n  const program = ts.createProgram([fileName], {})\n  const checker = program.getTypeChecker()\n  const source = program.getSourceFile(fileName)\n\n  if (!source) {\n    // TODO: move to chalk js lib to provide better error messages\n    throw new Error('Typescript source file is required')\n  }\n\n  ts.forEachChild(source, (node) => {\n    if (ts.isInterfaceDeclaration(node)){\n      // @ts-ignore\n      const symbol = checker.getSymbolAtLocation(node.name)\n      const data = [] as TestPropsInfo[]\n      symbol.members.forEach((loc) => {\n        const info = serializeSymbol(loc, checker)\n        data.push(info)\n      })\n      generateTestFile(data, testName)\n    }\n  });\n}\n"],"file":"index.js"}